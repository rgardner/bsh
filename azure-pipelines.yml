# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - "*"
    exclude:
      - .clang-format
      - .dockerignore
      - CONTRIBUTING.md
      - Makefile
      - README.md
      - docker

pr:
  branches:
    include:
      - master
  paths:
    include:
      - "*"
    exclude:
      - .clang-format
      - .dockerignore
      - CONTRIBUTING.md
      - Makefile
      - README.md
      - docker

strategy:
  matrix:
    linux:
      imageName: "ubuntu-latest"
      cmakeGenerator: "Ninja"
      useValgrind: true
    mac:
      imageName: "macos-latest"
      cmakeGenerator: "Xcode"
      useValgrind: false

pool:
  vmImage: $(imageName)

steps:
  - bash: |
      set -euo pipefail
      sudo apt-get install --yes --no-install-recommends \
        libbsd-dev \
        libreadline-dev \
        ninja-build \
        pkg-config \
        valgrind
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: "Install Linux-specific build dependencies"

  - bash: |
      set -euo pipefail
      mkdir -p build/debug
      pushd build/debug
      cmake -G "${GENERATOR}" -DCMAKE_BUILD_TYPE:STRING=Debug -DBSH_USE_VALGRIND:BOOL="${USE_VALGRIND}" ../..
      cmake --build . --config Debug
      popd

      mkdir -p build/release
      pushd build/release
      cmake -G "${GENERATOR}" -DCMAKE_BUILD_TYPE:STRING=Release -DBSH_USE_VALGRIND:BOOL="${USE_VALGRIND}" ../..
      cmake --build . --config Release
    env:
      GENERATOR: $(cmakeGenerator)
      USE_VALGRIND: $(useValgrind)
    displayName: "Build project"

  - script: |
      set -euo pipefail
      pushd build/debug
      cmake --build . --config Debug --target runTests
      popd

      pushd build/release
      cmake --build . --config Debug --target runTests
    displayName: "Run tests"
